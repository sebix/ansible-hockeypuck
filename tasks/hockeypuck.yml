# SPDX-FileCopyrightText: 2022 Intevation GmbH, 2023-2024 Institute for Common Good Technology
# SPDX-License-Identifier: BSD-3-Clause
---
- name: install gcc
  package:
    name: gcc

- name: create group hockeypuck
  ansible.builtin.group:
    name: hockeypuck
- name: create user hockeypuck
  ansible.builtin.user:
    name: hockeypuck
    comment: "The user running hockeypuck"
    shell: /bin/bash
    group: hockeypuck
    password: "!"
    home: "{{ hockeypuck_home }}"
    system: true
    update_password: on_create

- name: create hockeypuck logging directory
  file:
    state: directory
    path: /var/log/hockeypuck
    owner: hockeypuck
    group: adm
    mode: '0755'
- name: create hockeypuck configuration directory
  file:
    state: directory
    path: /etc/hockeypuck
    owner: root
    group: hockeypuck
    mode: '0755'

- name: clone hockeypuck repository
  git:
    repo: https://github.com/hockeypuck/hockeypuck
    dest: "{{ hockeypuck_directory }}"
    version: "{{ hockeypuck_git_version }}"
    update: true
  become_user: hockeypuck
- name: read version from git
  ansible.builtin.command:
    argv:
      - git
      - describe
    chdir: "{{ hockeypuck_directory }}"
  register: hockeypuck_git_describe
- name: show version read from git
  debug:
    msg: "{{ hockeypuck_git_describe.stdout|trim }}"
# we cannot reliably determine when we need to rebuild hockeypuck, so just do it always, it's very quick
# one possibility is to check the return values of above task, but that does not cover local changes
- name: install hockeypuck
  ansible.builtin.command:
    argv:
      - "/opt/go/{{ golang_version }}/bin/go"
      - install
      - -ldflags
      - "-X hockeypuck/server.Version={{ hockeypuck_git_describe.stdout|trim }} -X hockeypuck/server.BuiltAt={{ _hockeypuck_build_time }}"
      - "{{ item }}"
    chdir: "{{ hockeypuck_directory }}/src/hockeypuck"
  become_user: hockeypuck
  environment:
    GOPATH: "{{ hockeypuck_home }}"
  loop:
    - hockeypuck/server/cmd/hockeypuck
    - hockeypuck/server/cmd/hockeypuck-dump
    - hockeypuck/server/cmd/hockeypuck-load
    - hockeypuck/server/cmd/hockeypuck-pbuild
  notify: restart hockeypuck
  vars:
    _hockeypuck_build_time: "{{ '%Y-%m-%dT%H:%M:%S%z' | strftime }}"
- name: install hockeypuck configuration
  template:
    src: hockeypuck.conf.j2
    dest: /etc/hockeypuck/hockeypuck.conf
    owner: root
    group: hockeypuck
    mode: '0750'
  notify: restart hockeypuck

- name: create hockeypuck systemd service
  template:
    src: hockeypuck.service.j2
    dest: /etc/systemd/system/hockeypuck.service
    mode: '0644'
    owner: root
    group: root
  register: __hockeypuck_systemd_service_file
- name: reload systemd if necessary
  systemd:
    daemon_reload: true
  when: __hockeypuck_systemd_service_file.changed
# can't use a handler here, as we need the daemon reload now
- name: enable hockeypuck service
  systemd:
    name: hockeypuck.service
    enabled: true
    state: started

- name: install logrotate configuration
  ansible.builtin.copy:
    src: logrotate
    dest: /etc/logrotate.d/hockeypuck
    mode: '0644'
    owner: root
    group: root

- name: install sks import script
  ansible.builtin.template:
    src: hockeypuck_load_sks_dump.sh.j2
    dest: /usr/local/bin/hockeypuck_load_sks_dump.sh
    mode: '0755'
    owner: root
    group: root
